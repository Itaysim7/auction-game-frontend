{"version":3,"sources":["App.js","Forms.js","Static-pages.js","summary-quiz/sq-data.js","summary-quiz/sq-answers.js","summary-quiz/results.js","summary-quiz/Summary-quiz.js","survey/survey-data.js","survey/Survey.js","reportWebVitals.js","index.js"],"names":["App","className","src","process","alt","Button","variant","size","onClick","window","location","href","Det","useState","value","setValue","options","useMemo","countryList","getData","type","min","max","placeholder","id","name","style","width","marginLeft","onChange","Desc","props","page","setPage","QuizData","question","answer","SQAns","map","ques","length","opt","index","color","answers","ret","Results","isreview","setIsreview","score","marginBottom","Sq","loadQuiz","currentIndex","state","setState","nextQuestionHandler","userAnswer","userAnswerId","push","disabled","checkAnswer","finishHandler","quizEnd","review","this","prevProps","prevState","isPlaying","duration","colors","remainingTime","option","Component","SurveyData","Survey","textAlign","rows","cols","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.66cf3886.chunk.js","sourcesContent":["import './App.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n\n  const nextClicked = () => {\n    window.location.href = '/description';\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <img className=\"photo\" src={process.env.PUBLIC_URL + './1.png'} alt=\"logo\" />\n        <Button className=\"button-container\"  variant=\"outline-primary\" size=\"lg\"\n          onClick={nextClicked} >Next</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useMemo } from 'react'\r\nimport Select from 'react-select'\r\nimport countryList from 'react-select-country-list'\r\nimport './Forms.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction Det()\r\n {\r\n    const [value, setValue] = useState('')\r\n    const options = useMemo(() => countryList().getData(), [])\r\n\r\n    const changeHandler = value => {\r\n      setValue(value)\r\n    }\r\n\r\n    const continueClicked = () => \r\n    {\r\n        window.location.href = '/';\r\n    }\r\n\r\n  return (\r\n    <div>\r\n        <div className='container-forms'>\r\n            <div className='layout'>\r\n                <h3>Please fill in a few details before we start</h3>\r\n                <div className='fill-in'>\r\n                    <h6>Age</h6>\r\n                    <form >\r\n                        <input className=\"age\" type=\"number\"  min=\"18\" max=\"100\" placeholder=\"-Please enter your age-\"/>\r\n                    </form>\r\n                    <h6>Gender</h6>\r\n                    <form >\r\n                        <select id=\"gender\" name=\"gender\">\r\n                            <option value>-Please select your gender-</option>\r\n                            <option value=\"Male\">Male</option>\r\n                            <option value=\"Female\">Female</option>\r\n                        </select>\r\n                    </form>\r\n                    <h6>Education</h6>\r\n                    <form >\r\n                        <select id=\"education\" name=\"education\">\r\n                            <option value=\"error\">-Please select your education-</option>\r\n                            <option value=\"Some High School\">Some High School</option>\r\n                            <option value=\"High School\">High School</option>\r\n                            <option value=\"Bachelor's Degree\">Bachelor's Degree</option>\r\n                            <option value=\"Master's Degree\">Master's Degree</option>\r\n                            <option value=\"Ph.D. or higher\">Ph.D. or higher</option>\r\n                        </select>\r\n                    </form>\r\n                    <h6>Nationality</h6>\r\n                    <form style={{width : '300px', marginLeft : '10px'}}>\r\n                        <Select placeholder=\"-Please select your Nationality-\" options={options} value={value} onChange={changeHandler} />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Button className=\"button-container\"  variant=\"outline-primary\" size=\"lg\"\r\n          onClick={continueClicked} >Continue</Button>\r\n    </div>\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default Det;\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './Static-pages.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Desc(props)\r\n{\r\n    const [page, setPage] = useState(2);\r\n\r\n    const nextClicked = () => {\r\n        if(page>=17)\r\n            window.location.href = '/';\r\n        else\r\n            setPage(page+1);\r\n    }\r\n    const previousClicked = () => {\r\n        if(page<=2)\r\n            window.location.href = '/';\r\n        setPage(page-1);\r\n    }\r\n\r\n    return (\r\n\r\n    <div className=\"container\">\r\n        <img className=\"photo\" src={process.env.PUBLIC_URL + `./${page}.png`} alt=\"logo\" />\r\n        <div className=\"buttons-container\">\r\n            <Button className=\"previous\"  variant=\"outline-primary\" size=\"lg\"\r\n                onClick={previousClicked} >Previous</Button>\r\n            <Button className=\"next\"  variant=\"outline-primary\" size=\"lg\"\r\n                onClick={nextClicked} >Next</Button>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Desc;","export const QuizData = [\r\n    {\r\n        id: 0,\r\n        question: `Who wins in a second price bid?`,\r\n        options: [`The bidder who offers the highest price gets an item at the highest price`,\r\n                 `The bidder who offers the second highest price gets an item at the second highest price`,\r\n                 `The bidder who offers the second highest price gets an item at the highest price`,\r\n                 `The bidder who offers the highest price gets an item at the second highest price`],\r\n        answer: `The bidder who offers the highest price gets an item at the second highest price`\r\n    },\r\n    {\r\n        id: 1,\r\n        question: `In this game you are in the role of _______?`,\r\n        options: [`A buyer in an auction`,\r\n                 `An auctioneer in an auction`,\r\n                 `An information provider who holds knowledge regarding the true worth of the auctioned item`,\r\n                 `None of the above is correct`],\r\n        answer: `An auctioneer in an auction`\r\n    },\r\n    {\r\n        id: 2,\r\n        question: `Who holds the knowledge regarding the true worth of the auctioned item?`,\r\n        options: [`You do (The auctioneer)`,\r\n                  `Both you and the buyers in the auction`,\r\n                  `Only the information provider`,\r\n                  `You and the information provider`],\r\n        answer: `Only the information provider`\r\n    },\r\n    {\r\n        id: 3,\r\n        question: `Which of the following parameters can be changed in each auction?`,\r\n        options: [`The number of bidders`,\r\n                  `The number of possible item values and their content`,\r\n                  `The number of possible bidder types and each type’s private evaluations`,\r\n                  `All the answers are correct`],\r\n        answer: `All the answers are correct`\r\n    },\r\n    {\r\n        id: 4,\r\n        question: `Who decides whether to purchase the information from the information provider?`,\r\n        options: [`Only You (the auctioneer ), and thus you will have to pay for it`,\r\n                  `Both you and the bidders, and thus the payment is split among all of you`,\r\n                  `Only the information provider `,\r\n                  `You and the information provider`],\r\n        answer: `Only You (the auctioneer ), and thus you will have to pay for it`\r\n    },\r\n    {\r\n        id: 5,\r\n        question: `What value will the bidder bid, if you decide not to purchase any information from the information provider?`,\r\n        options: [`They won’t place any bid without information`,\r\n                 `Each possible bidder type will bid his highest evaluation among his possible item evaluations`,\r\n                 `Each possible bidder type will bid his lowest evaluation among his possible item evaluations`,\r\n                 `The bidders will use values expectancy (average value) to calculate their bid`],\r\n        answer: `The bidders will use values expectancy (average value) to calculate their bid`\r\n    },\r\n    {\r\n        id: 6,\r\n        question: `What  value will the buyers offer, if you do decide to purchase the information regarding the true worth of the auctioned item from the information provider?`,\r\n        options: [`Both you and all the bidders will be exposed to the specific value of the item. Therefore, each possible bidder type will offer his highest bid from his possible item values`,\r\n                `Both you and all the bidders will be exposed to the specific value of the item. Therefore, each  possible bidder type will offer his item’s true value as was exposed by the information provider`,\r\n                `The bidders won’t be exposed to the specific value of the item. Therefore, each possible bidder type will offer the lowest bid  from his possible item values`,\r\n                `The bidders won’t be exposed to the specific value of the item. Therefore, they will use values expectancy (average value) to calculate their bid`],\r\n        answer: `Both you and all the bidders will be exposed to the specific value of the item. Therefore, each  possible bidder type will offer his item’s true value as was exposed by the information provider`\r\n    },\r\n    {\r\n        id: 7,\r\n        question: `What is your goal in this game, and how is your score in each round calculated?`,\r\n        options: [`Your goal is to sell each item at the highest possible price. Your score is actually the difference between the actual sale price and the expected value of the item`,\r\n                `Your goal is to sell each item at the highest possible price. Your score is actually the difference between the actual sale price and the expected value of the item, minus the information purchase price if purchased. , i.e, in a case where information is purchased, you can either gain or lose game points`,\r\n                `Your goal is to sell each item at the highest price possible. Your score is actually the difference between the actual sale price and the expected \t     value of the item . i.e, in a case where no information is purchased,bidders use their\" expectanc\" y to decide how much to bid and thus the actual selling price is equal to the expected price, and you gain 0 game points`,\r\n                `Answers B+C are correct`],\r\n        answer: `Answers B+C are correct`\r\n    },\r\n    {\r\n        id: 8,\r\n        question: `Why choose to buy information?`,\r\n        options: [`Because you are not sure regarding the value of the item you aim to sell and there is a set of possible values it might be worth`,\r\n                `If the actual selling price is greater than the\" average value (due to information purchasing), \" you will sell the item for more than the expected price, and therefore earn some game points`,\r\n                `If the actual selling price is greater than the\" average value (due to information purchasing), \" you will sell the item for more than the expected price, and therefore might earn some game points (depending on the information cost)`,\r\n                `If  the actual selling price is equal to the\" average value (due to information purchasing), \" you will sell the item for the the expected price, and therefore you lose some game points (because of the information cost)`],\r\n        answer: `If the actual selling price is greater than the\" average value (due to information purchasing), \" you will sell the item for more than the expected price, and therefore might earn some game points (depending on the information cost)`\r\n    },\r\n    {\r\n        id: 9,\r\n        question: `Why choose not to buy information?`,\r\n        options: [`If  the actual selling price is less than the\" average value (due to information purchasing), \" you will sell the item for less than the expected price, and therefore might lose some game points (depending on the the information cost).`,\r\n                `If  the actual selling price is equal to the\" average value(due to information purchasing), \" you will sell the item for the expected price, and therefore you lose some game points (because of the information cost).`,\r\n                `If  the actual selling price is greater than the\" average value, \" you will sell the item for more than the expected price, and therefore might earn or lose some game points (depending on the information cost)`,\r\n                `All the answers are correct`],\r\n        answer: `All the answers are correct`\r\n    },\r\n]\r\n\r\n\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {QuizData} from './sq-data'\r\nimport './Summary-quiz.css';\r\n\r\n \r\n\r\n\r\nfunction SQAns(props) {\r\n\r\n  const ret = () => {\r\n    props.ret()\r\n  }  \r\n \r\n    return (\r\n    <div className=\"color\">\r\n      <div className=\"que-con\">\r\n          {QuizData.map(ques =>\r\n            <p key={ques.id}>\r\n                <span>{`Question ${ques.id + 1} of ${QuizData.length}`}</span>\r\n                <h2>{ques.question}</h2>\r\n                {ques.options.map((opt,index) =>\r\n                    <p key={index}  style={{ color: 'black'}} \r\n                    className={`options ${opt === ques.answer? \"correct\" : props.answers[ques.id] === index+1? \"wrong\": null}`}>\r\n                        {opt}\r\n                    </p>   \r\n                )}\r\n            </p>)}\r\n          <Button onClick={ret} variant=\"secondary\" size=\"lg\" >Return</Button>\r\n      </div>\r\n    </div>    \r\n    );\r\n  }\r\n\r\n  export default SQAns;","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Summary-quiz.css';\r\nimport {QuizData} from './sq-data'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport SQAns from './sq-answers';\r\n\r\nfunction Results(props)\r\n{\r\n  const [isreview, setIsreview] = useState(false);\r\n  const review = () => {\r\n    setIsreview(true)\r\n  }\r\n  const ret = () => {\r\n    setIsreview(false)\r\n  }  \r\n\r\n  if(isreview)\r\n  {\r\n    return (\r\n      <SQAns answers={props.answers} ret={ret}/>\r\n    )\r\n  }\r\n  else \r\n  { \r\n    return(\r\n    <div className=\"color\">\r\n      <div className=\"result\">\r\n        <h1>pass mark</h1>\r\n        <h4>Your score: {props.score}/{QuizData.length}</h4>\r\n        <h4>Passing score: 7/{QuizData.length}</h4>\r\n        <hr/> \r\n        <h1>Result:</h1>\r\n        {props.score >= 7 && <h3 style={{color : 'green', marginBottom : '30px'}}>Congratulations, you passed</h3>}\r\n        {props.score < 7 && <h3 style={{color : 'red', marginBottom : '30px'}}>Failed</h3>}\r\n        <Button onClick={review} variant=\"secondary\" size=\"lg\" >Review Quiz</Button>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Summary-quiz.css';\r\nimport {QuizData} from './sq-data'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport Results from './results';\r\n\r\n \r\n\r\nexport class Sq extends Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props)\r\n    this.state = {\r\n      userAnswer: null, userAnswerId: null , currentIndex: 0, options:[], score: 0, disabled: true, \r\n      answers: [], quizEnd: false\r\n    }\r\n  }\r\n\r\n  loadQuiz = () => \r\n  {\r\n    const {currentIndex} = this.state;\r\n    this.setState(() => {\r\n      return{\r\n        question: QuizData[currentIndex].question,\r\n        options: QuizData[currentIndex].options,\r\n        answer: QuizData[currentIndex].answer\r\n      }\r\n    })\r\n  }\r\n\r\n  nextQuestionHandler = () => \r\n  {\r\n    const {userAnswer, answer, score, answers, userAnswerId} = this.state;\r\n    if(userAnswer === answer)\r\n      this.setState({score: score+1}) \r\n    this.state.answers.push(userAnswerId)\r\n    this.setState({\r\n      currentIndex: this.state.currentIndex + 1,\r\n      userAnswer: null,\r\n      disabled: true,\r\n      userAnswerId:null,\r\n    })\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loadQuiz();\r\n  }\r\n\r\n  checkAnswer = (answer,id) => {\r\n    this.setState({\r\n      userAnswer: answer,\r\n      disabled: false,\r\n      userAnswerId: id\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState)\r\n  {\r\n    const {currentIndex} = this.state;\r\n    if(this.state.currentIndex !== prevState.currentIndex)\r\n    {\r\n      this.setState(() => {\r\n        return{\r\n          question: QuizData[currentIndex].question,\r\n          options: QuizData[currentIndex].options,\r\n          answer: QuizData[currentIndex].answer,\r\n        }\r\n      })\r\n    }\r\n  }\r\n  finishHandler = () => {\r\n    const {userAnswer, answer, score, userAnswerId} = this.state;\r\n    this.state.answers.push(userAnswerId)\r\n    if(userAnswer === answer)\r\n      this.setState({score: score+1}) \r\n    this.setState({quizEnd: true})\r\n  } \r\n  review = () => {\r\n    window.location.href = '/review-quiz';\r\n} \r\n\r\n\r\n  render ()\r\n  {\r\n    const {question, options, currentIndex, userAnswer, quizEnd, score, answers} = this.state;\r\n\r\n    if(quizEnd)\r\n      {\r\n        return(\r\n          <Results score={score} answers={answers}/>\r\n      )\r\n      }    \r\n\r\n    return(\r\n      <div className=\"color\">\r\n        <div className=\"que-con\" >\r\n          <div className=\"timer\">\r\n            <CountdownCircleTimer isPlaying duration={900} colors={[['#006777', 0.33],['#F7B801', 0.33],['#A30000', 0.33],]}>\r\n              {({ remainingTime }) => remainingTime}\r\n            </CountdownCircleTimer>\r\n          </div>\r\n          <h2>{question}</h2>\r\n          <span>{`Question ${currentIndex + 1} of ${QuizData.length}`}</span>\r\n          {\r\n            options.map((option, index) => \r\n              <p key={index} className={`options ${userAnswer === option? \"selected\" : null}`}\r\n              onClick={() => this.checkAnswer(option, index+1)}>\r\n                {option}\r\n              </p>\r\n            )\r\n          }\r\n          {currentIndex < QuizData.length-1 && \r\n            <Button disabled={this.state.disabled}  onClick={this.nextQuestionHandler} variant=\"dark\" size=\"lg\" >Next</Button>\r\n\r\n          }\r\n          {currentIndex === QuizData.length-1 &&\r\n            <Button disabled={this.state.disabled} onClick={this.finishHandler} variant=\"dark\" size=\"lg\" >Finish</Button>\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n\r\n  };\r\n}\r\n\r\nexport default Sq;","export const SurveyData = [\r\n    {\r\n        id: 0,\r\n        question: `Overall, how satisfied were you with this HIT?`,\r\n        options: [`Not satisfied at all`,\r\n                 `Somewhat satisfied`,\r\n                 `Generally satisfied`,\r\n                 `Very satisfied`],\r\n    },\r\n    {\r\n        id: 1,\r\n        question: `What was your attention span when you did the HIT?`,\r\n        options: [`I did not pay attention at all`,\r\n                 `I did some other things while I did the HIT`,\r\n                 `I was fully dedicated to the HIT`],\r\n    },\r\n    {\r\n        id: 2,\r\n        question: `Are you happy with the bonus?(2$)`,\r\n        options: [`Not happy at all`,\r\n                  `Somewhat happy`,\r\n                  `Genreally happy`,\r\n                  `Very happy`],\r\n    },\r\n]\r\n\r\n\r\n","import React from 'react';\r\nimport './survey.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {SurveyData} from './survey-data'\r\n\r\n\r\n\r\nfunction Survey()\r\n {\r\n\r\n    const submitClicked = () => \r\n    {\r\n        window.location.href = '/';\r\n    }\r\n\r\n  return (\r\n    <div>\r\n        <div className='container-survey'>\r\n            <div className='layout'>\r\n                <h3 style={{textAlign : 'center'}}>Please answer this short survey</h3>\r\n                <div className='fill-in'>\r\n                    {SurveyData.map(question =>\r\n                        <div key={question.id}>\r\n                            <h5 style={{color : 'orange', marginBottom : '10px', marginLeft: '10px'}}>{question.question}</h5>\r\n                            {question.options.map(opt =>\r\n                                <div className=\"survey-radio\">\r\n                                    <input type=\"radio\" value={opt} name={question.id} /> {opt}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    <h5 style={{color : 'orange', marginBottom : '10px', marginLeft: '10px'}}>Do you have any comments?</h5>\r\n                    <textarea style={{ marginLeft: '3%'}} id=\"story\" name=\"story\" rows=\"5\" cols=\"33\"></textarea>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Button className=\"button-container\"  variant=\"outline-primary\" size=\"lg\"\r\n          onClick={submitClicked} >Submit Hit</Button>\r\n    </div>\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default Survey;\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Det from './Forms';\nimport Desc from './Static-pages';\nimport Sq from './summary-quiz/Summary-quiz';\nimport Survey from './survey/Survey';\nimport reportWebVitals from './reportWebVitals';\nimport { Route, BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Route exact path=\"/\" component={App}/>\n      <Route exact path=\"/description\" component={Desc}/>\n      <Route exact path=\"/forms\" component={Det}/>\n      <Route exact path=\"/survey\" component={Survey}/>\n      <Route exact path=\"/summary-quiz\" component={Sq}/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}